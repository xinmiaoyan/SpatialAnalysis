                }
            }else{
                if(!identical(thisPkg, thisEnv)){
                    .ess.assign(this, thisEnv, envpkg)
                    objectsPkg <- c(objectsPkg, this)
                }
            }
        }else{
            newPkg <- c(newPkg, this)
        }
        if (!is.null(thisNs)) {
            isDependent <- .ess.ns_propagate(thisEnv, this, importsEnvs)
            newDeps <- stats::setNames(list(packages[isDependent]), this)
            dependentPkgs <- c(dependentPkgs, newDeps)
        }
    }
    ## deal with new plain objects and functions
    for (this in intersect(newPkg, newNs)) {
        thisEnv <- get(this, envir = env, inherits = FALSE)
        if (exists(this, envir = fallback_env, inherits = FALSE)){
            thisGl <- get(this, envir = fallback_env)
            if (.ess.differs(thisEnv, thisGl)) {
                if (is.function(thisEnv)) {
                    environment(thisEnv) <- envns
                    newFunc <- c(newFunc, this)
                } else {
                    newObjects <- c(newObjects, this)
                }
                .ess.assign(this, thisEnv, fallback_env)
                if (.is.essenv(fallback_env))
                    .ess.assign(this, thisEnv, .GlobalEnv)
            }
        } else {
            if (is.function(thisEnv)) {
                environment(thisEnv) <- envns
                newFunc <- c(newFunc, this)
            } else {
                newObjects <- c(newObjects, this)
            }
            .ess.assign(this, thisEnv, fallback_env)
            if (.is.essenv(fallback_env))
                .ess.assign(this, thisEnv, .GlobalEnv)
        }
    }
    if(length(funcNs))
        objectsNs <- c(objectsNs, sprintf("FUN[%s]", paste(funcNs, collapse = ", ")))
    if(length(funcPkg))
        objectsPkg <- c(objectsPkg, sprintf("FUN[%s]", paste(funcPkg, collapse = ", ")))
    if(length(newFunc))
        newObjects <- c(newObjects, sprintf("FUN[%s]", paste(newFunc, collapse = ", ")))
    ## CLASSES
    classesPkg <- classesNs <- newClasses <- character()
    for(this in allClassDefs){
        newPkg <- newNs <- FALSE
        thisEnv <- get(this, envir = env)
        if(exists(this, envir = envpkg, inherits = FALSE)){
            if(!.ess.identicalClass(thisEnv, get(this, envir = envpkg))){
                .ess.assign(this, thisEnv, envir = envpkg)
                classesPkg <- c(classesPkg, this)
            }
        }else{
            newPkg <- TRUE
        }
        if(exists(this, envir = envns, inherits = FALSE)){
            if(!.ess.identicalClass(thisEnv, get(this, envir = envns))){
                .ess.assign(this, thisEnv, envir = envns)
                classesNs <- c(classesNs, this)
            }
        }else{
            newNs <- TRUE
        }
        if(newNs && newPkg){
            if(exists(this, envir = fallback_env, inherits = FALSE)){
                if(!.ess.identicalClass(thisEnv, get(this, envir = fallback_env))){
                    .ess.assign(this, thisEnv, envir = fallback_env)
                    newClasses <- c(newClasses, this)
                }
            }else{
                .ess.assign(this, thisEnv, envir = fallback_env)
                newClasses <- c(newClasses, this)
            }
        }
    }
    if(length(classesPkg))
        objectsPkg <- gettextf("CLS[%s]", sub(ClassPattern, "", paste(classesPkg, collapse = ", ")))
    if(length(classesNs))
        objectsNs <- gettextf("CLS[%s]", sub(ClassPattern, "", paste(classesNs, collapse = ", ")))
    if(length(newClasses))
        newObjects <- gettextf("CLS[%s]", sub(ClassPattern, "", paste(newClasses, collapse = ", ")))
    ## METHODS:
    ## Method internals: For efficiency reasons setMethod() caches
    ## method definition into a global table which you can get with
    ## 'getMethodsForDispatch' function, and when a method is dispatched that
    ## table is used. When ess-developer is used to source method definitions the
    ## two copies of the functions are identical up to the environment. The
    ## environment of the cached object has namespace:foo as it's parent but the
    ## environment of the object in local table is precisely namspace:foo. This
    ## does not cause any difference in evaluation.
    methodNames <- allMethodTables
    methods <- sub(methods:::.TableMetaPrefix(), "", methodNames)
    methods <- sub(":.*", "", methods)
    methodsNs <- newMethods <- character()
    for (i in seq_along(methods)){
        table <- methodNames[[i]]
        tableEnv <- get(table,  envir = env)
        if(exists(table,  envir = envns, inherits = FALSE)){
            inserted <- .ess.ns_insertMethods(tableEnv, get(table, envir = envns), envns)
            if(length(inserted))
                methodsNs <- c(methodsNs,  gettextf("%s{%s}", methods[[i]], paste(inserted, collapse = ", ")))
        }else if(exists(table,  envir = fallback_env, inherits = FALSE)){
            inserted <- .ess.ns_insertMethods(tableEnv, get(table, envir = fallback_env), envns)
            if(length(inserted))
                newMethods <- c(newMethods,  gettextf("%s{%s}", methods[[i]], paste(inserted, collapse = ", ")))
        }else{
            .ess.assign(table, tableEnv, envir = fallback_env)
            newMethods <- c(newMethods,  gettextf("%s{%s}", methods[[i]], paste(objects(envir = tableEnv, all.names = T), collapse = ", ")))
        }
    }
    if(length(methodsNs))
        objectsNs <- c(objectsNs, gettextf("METH[%s]", paste(methodsNs, collapse = ", ")))
    if(length(newMethods))
        newObjects <- c(newObjects, gettextf("METH[%s]", paste(newMethods, collapse = ", ")))
    if (verbose) {
        msgs <- unlist(list(
            if(length(objectsPkg))
                sprintf("PKG: %s", paste(objectsPkg, collapse = ", ")),
            if(length(objectsNs))
                sprintf("NS: %s", paste(objectsNs, collapse = ", ")),
            if(length(dependentPkgs))
                .ess.ns_format_deps(dependentPkgs),
            if(length(newObjects)) {
                env_name <- .ess.ns_env_name(fallback_env)
                sprintf("%s: %s", env_name, paste(newObjects, collapse = ", "))
            }))
        if(length(msgs))
            .ess_mpi_message(paste(msgs, collapse = "  "))
    }
    invisible(env)
}
}
{
.ess.ns_insertMethods <- function(tableEnv,  tablePkg, envns) {
    inserted <- character()
    for(m in ls(envir = tableEnv, all.names = T)){
        if(exists(m, envir = tablePkg, inherits = FALSE)){
            thisEnv <- get(m, envir = tableEnv)
            thisPkg <- get(m, envir = tablePkg)
            if(is(thisEnv, "MethodDefinition") && is(thisPkg, "MethodDefinition") &&
               .ess.differs(thisEnv@.Data, thisPkg@.Data)){
                environment(thisEnv@.Data) <- envns
                ## environment of cached method in getMethodsForDispatch table is still env
                ## not a problem as such,  but might confuse users
                .ess.assign(m, thisEnv, tablePkg)
                inserted <- c(inserted, m)
            }}}
    inserted
}
## our version of R's evalSource
.ess.ns_evalSource <- function(file, visibly, output, expr, package = "",
                               fake.source = FALSE) {
    envns <- tryCatch(asNamespace(package), error = function(cond) NULL)
    if(is.null(envns))
        stop(gettextf("Package \"%s\" is not attached and no namespace found for it",
                      package), domain = NA)
    env <- new.env(parent = envns)
    env[[".packageName"]] <- package
    methods:::setCacheOnAssign(env, TRUE)
    if (missing(file))
        eval(expr, envir = env)
    else  if (is(file, "character"))
        for (f in file) {
            .ess.source(f, local = env, visibly = visibly,
                        output = output, keep.source = TRUE,
                        max.deparse.length = 300,
                        fake.source = fake.source,
                        message.prefix = sprintf("[%s] ", package))
        }
    else stop(gettextf("Invalid file argument:  got an object of class \"%s\"",
                       class(file)[[1]]), domain = NA)
    env
}
}
{
.ess.assign <- function(x, value, envir) {
    ## Cannot add bindings to locked environments
    exists <- exists(x, envir = envir, inherits = FALSE)
    if (exists && bindingIsLocked(x, envir)) {
        unlockBinding(x, envir)
        assign(x, value, envir = envir, inherits = FALSE)
        op <- options(warn = -1)
        on.exit(options(op))
        lockBinding(x, envir)
    } else if (exists || !environmentIsLocked(envir)) {
        assign(x, value, envir = envir, inherits = FALSE)
    } else {
        warning(sprintf("Cannot assign `%s` in locked environment", x),
                call. = FALSE)
    }
    invisible(NULL)
}
.ess.identicalClass <- function(cls1, cls2, printInfo = FALSE) {
    slots1 <- slotNames(class(cls1))
    slots2 <- slotNames(class(cls2))
    if(identical(slots1, slots2)){
        vK <- grep("versionKey", slots1)
        if(length(vK))
            slots1 <- slots2 <- slots1[-vK]
        out <- sapply(slots1, function(nm) identical(slot(cls1, nm), slot(cls2, nm)))
        if(printInfo) print(out)
        all(out)
    }
}
.ess.differs <- function(f1, f2) {
    if (is.function(f1) && is.function(f2)){
        !(identical(body(f1), body(f2)) && identical(args(f1), args(f2)))
    }else
        !identical(f1, f2)
}
}
{
.ess.is_package <- function(envName) {
  isPkg <- identical(substring(envName, 0, 8), "package:")
  isPkg && (envName != "package:base")
}
.ess.ns_propagate <- function(obj, name, importsEnvs) {
  containsObj <- vapply(importsEnvs, logical(1), FUN = function(envs) {
    name %in% names(envs)
  })
  lapply(importsEnvs[containsObj], .ess.assign,
         x = name, value = obj)
  containsObj
}
.ess.ns_format_deps <- function(dependentPkgs) {
    pkgs <- unique(unlist(dependentPkgs, use.names = FALSE))
    lapply(pkgs, function(pkg) {
        isDep <- vapply(dependentPkgs, function(deps) pkg %in% deps, logical(1))
        pkgDependentObjs <- names(dependentPkgs[isDep])
        sprintf("DEP:%s [%s]   ", pkg, paste(pkgDependentObjs, collapse = ", "))
    })
}
.ess.ns_env_name <- function(env) {
    name <- environmentName(env)
    name <-
        if (name == "") "Local"
        else if (grepl("^essenv:", name)) "NEW"
        else name
    name
}
}
{
.ess.ns_insert_essenv <- function(nsenv) {
    if (is.character(nsenv))
        nsenv <- asNamespace(nsenv)
    stopifnot(isNamespace(nsenv))
    if (identical(nsenv, .BaseNamespaceEnv))
        return(.GlobalEnv)
    essenv_name <- sprintf("essenv:%s", environmentName(nsenv))
    nsenv_parent <- parent.env(nsenv)
    if (environmentName(nsenv_parent) == essenv_name) {
        return(nsenv_parent)
    }
    essenv <- new.env(parent = nsenv_parent)
    essenv[[".__ESSENV__."]] <- TRUE
    attr(essenv, "name") <- essenv_name
    nssym <- ".__NAMESPACE__."
    nssym_val <- get(nssym, envir = nsenv, inherits = FALSE)
    unlockBinding(nssym, nsenv)
    nsenv[[nssym]] <- NULL
    on.exit({
        nsenv[[nssym]] <- nssym_val
        lockBinding(nssym, nsenv)
    })
    parent.env(nsenv) <- essenv
    essenv
}
.is.essenv <- function(env) {
    exists(".__ESSENV__.", envir = env, inherits = FALSE)
}
}
{
.ess_keep <- function(.x, .f, ...) {
  is_true <- vapply(.x, .f, logical(1), ...)
  .x[is_true]
}
.ess_devtools_functions <- function() {
  if (!requireNamespace("devtools")) {
    .ess_mpi_error("devtools is not installed")
    stop("internal error")
  }
  devtools_env <- asNamespace("devtools")
  exports <- getNamespaceExports("devtools")
  funs_exported <- as.list(devtools_env)[exports]
  is_first_arg <- function(f, arg) {
    args <- names(formals(f))
    length(args) && args[[1]] == arg
  }
  funs_pkg <- .ess_keep(funs_exported, is.function)
  funs_pkg <- .ess_keep(funs_pkg, is_first_arg, "pkg")
  funs_names <- sort(names(funs_pkg))
  funs_names
}
}
.ess.collect.ESSR.objects()
options(STERM='iESS', str.dendrogram.last="'", editor='emacsclient', show.error.locations=TRUE)
.ess.command(local(.ess_funargs("library")), 'ess-output-delimiter27')
library(tidyverse)
  library(ggplot2)
  library(RColorBrewer)
.ess.command(local(getwd()), 'ess-output-delimiter28')
spatial_info_table <- read_tsv("/rsrch3/scratch/genomic_med/ychu2/projects/project26/result/PM3131/3_SpaGCN/HKU01/alpha_1_beta_49/p_0.4_nClusters_9/spatial_cluster_score_table.tsv")
color_table <- read_tsv("/rsrch3/scratch/genomic_med/ychu2/projects/project26/knowledge/private/pathology_annotation/pa_color.tsv")
spatial_info_table <- spatial_info_table %>%
  filter(!is.na(pathology_annotation))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
nCluster = length(unique(spatial_info_table$pathology_annotation))
colorCluster = sample(col_vector, nCluster)
gh <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = pathology_annotation),
           color = NA,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  theme_void()
nCluster = length(unique(spatial_info_table$cluster))
colorCluster = sample(col_vector, nCluster)
spatial_info_table$cluster <- as.character(spatial_info_table$cluster)
gc <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = cluster),
           color = NA,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  theme_void()
g <- cowplot::plot_grid(gh, gc, align = "hv", ncol = 2)
.ess.command(local(getwd()), 'ess-output-delimiter29')
ggsave("histology_cluster_hex_plot.pdf", g, width = 12, height = 5)
.ess.command(local(getwd()), 'ess-output-delimiter30')
.ess.command(local(search()), 'ess-output-delimiter31')
.ess.command(local(tryCatch(base::print(base::names(.GlobalEnv), max=1e6), error=function(e){})), 'ess-output-delimiter32')
.ess.command(local(tryCatch(base::print(base::names(package:RColorBrewer), max=1e6), error=function(e){})), 'ess-output-delimiter33')
.ess.command(local(print(objects(pos=2, all.names=TRUE), max=1e6)), 'ess-output-delimiter34')
.ess.command(local(tryCatch(base::print(base::names(package:lubridate), max=1e6), error=function(e){})), 'ess-output-delimiter35')
.ess.command(local(print(objects(pos=3, all.names=TRUE), max=1e6)), 'ess-output-delimiter36')
.ess.command(local(tryCatch(base::print(base::names(package:forcats), max=1e6), error=function(e){})), 'ess-output-delimiter37')
.ess.command(local(print(objects(pos=4, all.names=TRUE), max=1e6)), 'ess-output-delimiter38')
.ess.command(local(tryCatch(base::print(base::names(package:stringr), max=1e6), error=function(e){})), 'ess-output-delimiter39')
.ess.command(local(print(objects(pos=5, all.names=TRUE), max=1e6)), 'ess-output-delimiter40')
.ess.command(local(tryCatch(base::print(base::names(package:dplyr), max=1e6), error=function(e){})), 'ess-output-delimiter41')
.ess.command(local(print(objects(pos=6, all.names=TRUE), max=1e6)), 'ess-output-delimiter42')
.ess.command(local(tryCatch(base::print(base::names(package:purrr), max=1e6), error=function(e){})), 'ess-output-delimiter43')
.ess.command(local(print(objects(pos=7, all.names=TRUE), max=1e6)), 'ess-output-delimiter44')
.ess.command(local(tryCatch(base::print(base::names(package:readr), max=1e6), error=function(e){})), 'ess-output-delimiter45')
.ess.command(local(print(objects(pos=8, all.names=TRUE), max=1e6)), 'ess-output-delimiter46')
.ess.command(local(tryCatch(base::print(base::names(package:tidyr), max=1e6), error=function(e){})), 'ess-output-delimiter47')
.ess.command(local(print(objects(pos=9, all.names=TRUE), max=1e6)), 'ess-output-delimiter48')
.ess.command(local(tryCatch(base::print(base::names(package:tibble), max=1e6), error=function(e){})), 'ess-output-delimiter49')
.ess.command(local(print(objects(pos=10, all.names=TRUE), max=1e6)), 'ess-output-delimiter50')
.ess.command(local(tryCatch(base::print(base::names(package:ggplot2), max=1e6), error=function(e){})), 'ess-output-delimiter51')
.ess.command(local(print(objects(pos=11, all.names=TRUE), max=1e6)), 'ess-output-delimiter52')
.ess.command(local(tryCatch(base::print(base::names(package:tidyverse), max=1e6), error=function(e){})), 'ess-output-delimiter53')
.ess.command(local(print(objects(pos=12, all.names=TRUE), max=1e6)), 'ess-output-delimiter54')
.ess.command(local(tryCatch(base::print(base::names(package:stats), max=1e6), error=function(e){})), 'ess-output-delimiter55')
.ess.command(local(print(objects(pos=14, all.names=TRUE), max=1e6)), 'ess-output-delimiter56')
.ess.command(local(tryCatch(base::print(base::names(package:graphics), max=1e6), error=function(e){})), 'ess-output-delimiter57')
.ess.command(local(print(objects(pos=15, all.names=TRUE), max=1e6)), 'ess-output-delimiter58')
.ess.command(local(tryCatch(base::print(base::names(package:grDevices), max=1e6), error=function(e){})), 'ess-output-delimiter59')
.ess.command(local(print(objects(pos=16, all.names=TRUE), max=1e6)), 'ess-output-delimiter60')
.ess.command(local(tryCatch(base::print(base::names(package:utils), max=1e6), error=function(e){})), 'ess-output-delimiter61')
.ess.command(local(print(objects(pos=17, all.names=TRUE), max=1e6)), 'ess-output-delimiter62')
.ess.command(local(tryCatch(base::print(base::names(package:datasets), max=1e6), error=function(e){})), 'ess-output-delimiter63')
.ess.command(local(print(objects(pos=18, all.names=TRUE), max=1e6)), 'ess-output-delimiter64')
.ess.command(local(tryCatch(base::print(base::names(package:methods), max=1e6), error=function(e){})), 'ess-output-delimiter65')
.ess.command(local(print(objects(pos=19, all.names=TRUE), max=1e6)), 'ess-output-delimiter66')
.ess.command(local(tryCatch(base::print(base::names(Autoloads), max=1e6), error=function(e){})), 'ess-output-delimiter67')
.ess.command(local(print(objects(pos=20, all.names=TRUE), max=1e6)), 'ess-output-delimiter68')
.ess.command(local(tryCatch(base::print(base::names(package:base), max=1e6), error=function(e){})), 'ess-output-delimiter69')
.ess.command(local(print(objects(pos=21, all.names=TRUE), max=1e6)), 'ess-output-delimiter70')
getwd()
.ess.command(local(.ess_funargs("geom_hex")), 'ess-output-delimiter71')
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
nCluster = length(unique(spatial_info_table$pathology_annotation))
colorCluster = sample(col_vector, nCluster)
gh <- ggplot(spatial_info_table) +
  stat_binhex(aes(x = -y_array,
               y = -x_array,
               fill = pathology_annotation),
           color = NA,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  theme_void()
nCluster = length(unique(spatial_info_table$cluster))
colorCluster = sample(col_vector, nCluster)
spatial_info_table$cluster <- as.character(spatial_info_table$cluster)
gc <- ggplot(spatial_info_table) +
  stat_binhex(aes(x = -y_array,
               y = -x_array,
               fill = cluster),
           color = NA,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  theme_void()
g <- cowplot::plot_grid(gh, gc, align = "hv", ncol = 2)
## setwd(dirname(opt$table))
ggsave("histology_cluster_hex_plot.pdf", g, width = 12, height = 5)
.ess.command(local(getwd()), 'ess-output-delimiter72')
.ess.command(local(.ess_funargs("stat_binhex")), 'ess-output-delimiter73')
.ess.command(local(.ess_funargs("aes")), 'ess-output-delimiter74')
.ess.command(local(.ess_funargs("scale_fill_manual")), 'ess-output-delimiter75')
.ess.command(local(tryCatch(base::print(base::names(.GlobalEnv), max=1e6), error=function(e){})), 'ess-output-delimiter76')
color_table
.ess.command(local(.ess_funargs("scale_color_manual")), 'ess-output-delimiter77')
.ess.command(local(local({ r <- .ess_get_completions("scale_color_manual(values = color_table$Color, ", 47, " = "); r[r != '...='] })), 'ess-output-delimiter78')
.ess.command(local(local({ r <- .ess_get_completions("scale_color_manual(values = color_table$Color, breaks = color_tabl", 66, " = "); r[r != '...='] })), 'ess-output-delimiter79')
.ess.command(local(local({ r <- .ess_get_completions("scale_color_manual(values = color_table$Color, breaks = color_table$T", 69, " = "); r[r != '...='] })), 'ess-output-delimiter80')
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
nCluster = length(unique(spatial_info_table$pathology_annotation))
colorCluster = sample(col_vector, nCluster)
gh <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = pathology_annotation,
               color = pathology_annotation),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  scale_color_manual(values = color_table$Color, breaks = color_table$Tissue) +
  theme_void()
nCluster = length(unique(spatial_info_table$cluster))
colorCluster = sample(col_vector, nCluster)
spatial_info_table$cluster <- as.character(spatial_info_table$cluster)
gc <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = cluster,
               color = cluster),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  scale_color_manual(values = colorCluster) +
  theme_void()
g <- cowplot::plot_grid(gh, gc, align = "hv", ncol = 2)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
nCluster = length(unique(spatial_info_table$pathology_annotation))
colorCluster = sample(col_vector, nCluster)
gh <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = pathology_annotation,
               color = pathology_annotation),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  scale_color_manual(values = color_table$Color, breaks = color_table$Tissue) +
  theme_void()
nCluster = length(unique(spatial_info_table$cluster))
colorCluster = sample(col_vector, nCluster)
spatial_info_table$cluster <- as.character(spatial_info_table$cluster)
gc <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = cluster,
               color = cluster),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  scale_color_manual(values = colorCluster) +
  theme_void()
g <- cowplot::plot_grid(gh, gc, align = "hv", ncol = 2)
setwd(dirname(opt$table))
.ess.command(local(getwd()), 'ess-output-delimiter81')
ggsave("histology_cluster_hex_plot.pdf", g, width = 12, height = 5)
.ess.command(local(getwd()), 'ess-output-delimiter82')
.ess.command(local(.ess_funargs("sample")), 'ess-output-delimiter83')
.ess.command(local(.ess_funargs("mapply")), 'ess-output-delimiter84')
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
nCluster = length(unique(spatial_info_table$pathology_annotation))
colorCluster = sample(col_vector, nCluster)
gh <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = pathology_annotation,
               color = pathology_annotation),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = color_table$Color, breaks = color_table$Tissue) +
  scale_color_manual(values = color_table$Color, breaks = color_table$Tissue) +
  theme_void()
nCluster = length(unique(spatial_info_table$cluster))
colorCluster = sample(col_vector, nCluster)
spatial_info_table$cluster <- as.character(spatial_info_table$cluster)
gc <- ggplot(spatial_info_table) +
  geom_hex(aes(x = -y_array,
               y = -x_array,
               fill = cluster,
               color = cluster),
           lwd = 0.1,
           stat = "identity") +
  scale_fill_manual(values = colorCluster) +
  scale_color_manual(values = colorCluster) +
  theme_void()
g <- cowplot::plot_grid(gh, gc, align = "hv", ncol = 2)
setwd(dirname(opt$table))
ggsave("histology_cluster_hex_plot.pdf", g, width = 12, height = 5)
.ess.command(local(getwd()), 'ess-output-delimiter85')
.ess.command(local(.ess_funargs("dirname")), 'ess-output-delimiter86')
